## MANIPULATIONS DE VECTEURS
x <- vector(mode = "integer", length = 5)
is.vector(x)
e <- seq(1,20,by=2)
is.vector(e)
e[3]
e[c(3,8,1)]
e[c(1,3,7,8)][c(1,3)]
a <- c(rep(T,4),rep(F,2))
e>5
e[e>5]
e[e != 11]
e[e == 11]
########## Graphiques qq exemples
z <- seq(-4,4,len=200)
plot(z, dnorm(z), type="l", lwd=3, col="steelblue")
abline(h=0, col=8)
abline(v=0)
lines(z, dnorm(z, mean=2), lty=2)
lines(z, dnorm(z, sd=0.5), lty=3, col=2, lwd=2)
lines(z, dnorm(z, sd=0.1), lty=3, col=3, lwd=3)
title("densites de la loi normale")
legend("topleft",
c("N(0,1)","N(2,1)","N(0,0.5)","N(0,0.1)"),
lty=c(1,2,3,3),
col=c("steelblue",1,2,3),
lwd=c(3,1,2,3))
###############################
## Manipulation de MATRICES
a=1:10               # on reprend
?matrix              # methode par defaut?
m <- matrix(a,nrow=4) # avec recycling (warning)
dim(m)
m[,3]                # 3eme colonne de m
m[2,3]               # element m(2,3)
class(m)             # different de mode(m)
########## Graphiques qq exemples
z <- seq(-4,4,len=200)
plot(z, dnorm(z), type="l", lwd=3, col="steelblue")
abline(h=0, col=8)
abline(v=0)
lines(z, dnorm(z, mean=2), lty=2)
lines(z, dnorm(z, sd=0.5), lty=3, col=2, lwd=2)
lines(z, dnorm(z, sd=0.1), lty=3, col=3, lwd=3)
title("densites de la loi normale")
legend("topleft",
c("N(0,1)","N(2,1)","N(0,0.5)","N(0,0.1)"),
lty=c(1,2,3,3),
col=c("steelblue",1,2,3),
lwd=c(3,1,2,3))
###############################
## Manipulation de MATRICES
a=1:10               # on reprend
?matrix              # methode par defaut?
m <- matrix(a,nrow=4) # avec recycling (warning)
dim(m)
m[,3]                # 3eme colonne de m
m[2,3]               # element m(2,3)
class(m)             # different de mode(m)
is.matrix(m)
p = matrix(a,ncol=2)  # par defaut byrow = FALSE
q = matrix(a,nrow=2)
q %*% p               # produit de matrices
q %*% m               # pb dimensions
diag(m)               # diagonale, meme si pas carree
t(m)                  # transpose
apply(m,1,sum)        # operation (sum) par ligne (1)
##################################
# exercice Tuto R sur les matrices
a <- sample(0:9, size=50, rep=TRUE)
M <- matrix(a, nrow=10, ncol=5); M
apply(M,2,mean)
apply(M,1,sd)
plot(M[,1], type="b") # valeurs de la colonne vs index
par(mfrow=c(2,3))
apply(M, 2, plot, type="b")
# Usage des  ...
m <- matrix(rnorm(60), nrow=20)
########## Graphiques qq exemples
z <- seq(-4,4,len=200)
plot(z, dnorm(z), type="l", lwd=3, col="steelblue")
abline(h=0, col=8)
abline(v=0)
########## Graphiques qq exemples
par(1,1)
z <- seq(-4,4,len=200)
########## Graphiques qq exemples
par(mfrom=(1,1)
########## Graphiques qq exemples
par(mfrom=(1,1))
########## Graphiques qq exemples
par(mfrom=c(1,1))
example(dudi.pca)
1:10
1:10:2
1:10:2
1:10
1:10:2
1:10
##################################
# exercice Tuto R sur les matrices
a <- sample(0:9, size=50, rep=TRUE)
M <- matrix(a, nrow=10, ncol=5); M
apply(M,2,mean)
apply(M,1,sd)
plot(M[,1], type="b") # valeurs de la colonne vs index
par(mfrow=c(2,3))
apply(M, 2, plot, type="b")
# Usage des  ...
m <- matrix(rnorm(60), nrow=20)
apply(m, 2, median)
apply(m, 2, quantile)
apply(m, 2, quantile, probs=c(1/3, 2/3))
##################################
# exercice Tuto R sur les matrices
a <- sample(0:9, size=50, rep=TRUE)
z <- seq(-4,4,len=200)
plot(z, dnorm(z), type="l", lwd=3, col="steelblue")
################
## DATA FRAME ##
?data.frame
a=sample(1:10); b=rep(c(1,2),5)
c <- c(rep("M",6),rep("F",4)) # facteur qualitatif
c <- factor(c)
x <- data.frame(a,b,c) # creation de la structure
# Usage des  fonctions dans apply
m <- matrix(rnorm(60), nrow=20)
apply(m, 2, median)
apply(m, 2, quantile)
apply(m, 2, quantile, probs=c(1/3, 2/3))
ls <- list(1:5, "toto", c(T,F), M) # sans nom
ln <- list(x=1:5,nom="toto",z=c(T,F), M=M) # named
summary(ln) # default method
ls[[1]]     # extraction element 1 de la liste
ln$x        # idem lorsque le nom est connu
stateFacts = read.table("C:\Users\Nicolas\OneDrive\Documents\Cours\S7\Data\tp1\StateFacts.txt")
stateFacts = read.table("C:/Users/Nicolas/OneDrive/Documents/Cours/S7/Data/tp1/StateFacts.txt")
stateFacts
summary(stateFacts)
mean(stateFacts)
var(stateFacts)
max(staetFacts)
max(statetFacts)
max(stateFacts)
summary(stateFacts[1,])
mean(stateFacts[1,])
mean(stateFacts[,1])
mean(stateFacts[1,1])
mean(stateFacts)
stateFacts[1,]
stateFacts[,1]
stateFacts[,2]
stateFacts[,3]
mean(stateFacts[,3])
table(stateFacts)
head(stateFacts)
stateFacts
row.names(stateFacts)
stateFacts$Region <- as.factor(state$Region)
stateFacts$Region <- as.factor(stateFacts$Region)
summary(stateFacts)
stateFacts$Region <- as.factor(stateFacts$Region)
states$Pop
stateFacts = read.table("C:/Users/Nicolas/OneDrive/Documents/Cours/S7/Data/tp1/StateFacts.txt", header=T, row.names = 1)
stateFacts
row.names(stateFacts)
stateFacts$Region <- as.factor(stateFacts$Region) # marche pas
states$Pop
stateFacts$Pop
attach(stateFacts$Pop)
summary(stateFacts)
mean(stateFacts)
var(stateFacts)
sd(staetFacts)
max(stateFacts)
max(stateFacts)
stateFacts$Region <- as.factor(stateFacts$Region)
quantile.default(stateFacts$Analphab)
sum(stateFacts$Revenu<5000)
sum(stateFacts$Pop^2)
tapply(stateFacts$Meurtre, stateFacts$Region, mean)
stateFacts[1:5, c(1,6,10)]
?cut
# fichier dans le working dir de RStudio
states = read.table("C:/Users/Nicolas/OneDrive/Documents/Cours/S7/Data/tp1/StateFacts.txt", header=T, row.names = 1)
head(states)
row.names(states)
colnames(states)
dim(states)
summary(states) # Region is char by default
states$Region <- as.factor(states$Region)
summary(states) # Region is now factor: ok
# selection d'objets (comme une liste)
states[[1]]    # = var de rang 1 (Pop)
states$Pop     # idem car named list
states[[1]][1] # car states[[1]] vector
states[2,3]    # car hérite aussi de la class "matrix"
## 2.5 - comprendre attach(), detach()
states$Pop
Pop
attach(states)   # rend visible les variables de states
Pop
detach(states)
Pop
# 2.6 sauvegarde au format interne R
save(states, file="States.Rdata")
summary(states$Region) # method summary.factor
summary(states$Apb)    # method summary.numeric
summary(states)        # summary.data.frame
summary(states$Etat)   # why??
## 3) sur stat élémentaires de states
attach(states)
mean(states$Revenu)
mean(Revenu)
sd(Meurtre)
sum(Revenu>5000) # nb d'états de revenu>5000
apply(states[,-c(1, 10)], 2, mean)
colnames(states)[4] <- "Apb"
sum(states$Pop^2)
summary(states) # vérif; method summary.data.frame
detach(states)
states$Region <- factor(states$Region)
# sauvegarde au format interne R (écrase la précédente)
save(states, file="States.Rdata")
### Utiliser en début de session (workspace vide)
load("States.Rdata")
attach(states)
# (2.8)
tapply(Meurtre, Region, mean)
## (6)
states[1:10,]
states[(nrow(states)-4):nrow(states),]
states[1:5, c(1, 6,10)]   # avec num col
states[1:5, c("Etat", "Meurtre", "Region")] # avec nom var
# d) selection d'obs et de var
states[Region == "South" & Revenu > 4500, c("Etat", "Pop")]
## (7) Création ou modification de variables
RevenuE <- Revenu * 1.1 # constante arbitraire ici
summary(RevenuE)
## copie de Region en labels conçis: R - like: pas de tests if... then
RG <- factor(Region,labels=c("NC","NE","S","W")) #
## vérification (table see later)
table(RG)
table(Region)
table(RG, Region) # table de contingence de 2 faceurs identiques
## (7 c) Facteur par recodage d'une var quantitative
?cut
cut(Diplome, breaks = 3) # auto
### DEBUT DE SEANCE: RELOAD
load("States.Rdata")
attach(states)
summary(states) # Etat doit etre char et Region "factor"
#####################################
############### TP F1 ###############
#####################################
# Importation sous forme de data.frame
# Win: Fichier -> Changer le répertoire courant
# -> path vers le fichier texte
getwd()
setwd('C:/Users/Nicolas/OneDrive/Documents/Cours/S7/Data/tp1')
# fichier dans le working dir de RStudio
states <- read.table("StateFacts.txt",
header=T, row.names=1) # labels col. 1
head(states)
row.names(states)
colnames(states)
### DEBUT DE SEANCE: RELOAD
load("States.Rdata")
attach(states)
summary(states) # Etat doit etre char et Region "factor"
# recrée FD cf TP Feuille 1
FD <- cut(Diplome, breaks = c(min(Diplome),47,57, max(Diplome)),
labels = c("a","b","c"), include.lowest = TRUE)
table(FD)
## Analyses préliminaires
## (1) NA?
ind <- c(2:9) # indices des var quantitatives
summary(states[,ind]) ## min, max, NA's...
## ou direct
sum(is.na(states)) # global
apply(is.na(states), 2, sum) # NA par col
## (2) ajouter un NA et le retrouver
states[12,2] <- NA
summary(states[,ind]) ## => see NA's...
apply(is.na(states), 2, sum) # par col
which(is.na(states), arr.ind = TRUE) # which row ?
which(is.na(states), arr.ind = FALSE) # which row ?
TRUE
### DEBUT DE SEANCE: RELOAD
load("States.Rdata")
attach(states)
summary(states) # Etat doit etre char et Region "factor"
# recrée FD cf TP Feuille 1
FD <- cut(Diplome, breaks = c(min(Diplome),47,57, max(Diplome)),
labels = c("a","b","c"), include.lowest = TRUE)
table(FD)
## Analyses préliminaires
## (1) NA?
ind <- c(2:9) # indices des var quantitatives
summary(states[,ind]) ## min, max, NA's...
## ou direct
sum(is.na(states)) # global
apply(is.na(states), 2, sum) # NA par col
## (2) ajouter un NA et le retrouver
states[12,2] <- NA
summary(states[,ind]) ## => see NA's...
apply(is.na(states), 2, sum) # par col
which(is.na(states), arr.ind = TRUE) # which row ?
which(is.na(states), arr.ind = FALSE) # which row ?
TRUE
TRUE
which(is.na(states), arr.ind = TRUE) # which row ?
## (2) ajouter un NA et le retrouver
states[12,2] <- NA
summary(states[,ind]) ## => see NA's...
apply(is.na(states), 2, sum) # par col
which(is.na(states), arr.ind = TRUE) # which row ?
states[is.na(Pop),] # none?
detach(states)
attach(states)
states[is.na(Pop),] # effect of attach...
## RESTORE data.frame
detach(states)
load("States.Rdata")
attach(states)
# (3) Histogramme = loi empirique approche la densité
par(mfrow=c(1,2))
hist(Meurtre, col=8)
# (3) Histogramme = loi empirique approche la densité
par(mfrow=c(1,2))
hist(Meurtre, col=8)
hist(Apb, col=8)
hist(Meurtre, col=8, freq=F) # normalisé sur la densité
hist(Meurtre, col=8, freq=F) # normalisé sur la densité
hist(Meurtre, col=8, freq=F) # normalisé sur la densité
hist(Meurtre, col=2, freq=F, # comparé avec autre algo
breaks="Scott")          # de calcul nb de classes
hist(Apb, col=8)
# (3) Histogramme = loi empirique approche la densité
par(mfrow=c(1,2))
hist(Meurtre, col=8)
hist(Apb, col=8)
hist(Meurtre, col=8, freq=F) # normalisé sur la densité
hist(Meurtre, col=2, freq=F, # comparé avec autre algo
breaks="Scott")          # de calcul nb de classes
hist(Apb, col=8)
hist(Meurtre, col=2, freq=F, # comparé avec autre algo
breaks="Scott")          # de calcul nb de classes
# avec apply: pb titre pas adapté
colnames(states) # numeric?
ind <- c(2:9)
par(mfrow=c(2,4))  #  subplots
apply(states[,ind], 2, hist, col=8)
# (4) Exemple de boucle for () {...} en R
par(mfrow=c(2,4))  #
for (j in ind) {
hist(states[,j], xlab="",
main=colnames(states)[j])
}
## (5) recherche d'un extrême = tri dans un data.frame
# tri de la table par Revenu
o <- order(Revenu)
states[o,][40:50,] 	# les 10 individus  correspondants aux
# plus grandes valeurs de Revenu
# plus grandes valeurs de Revenu
#
# plus grandes valeurs de Revenu
#
# plus grandes valeurs de Revenu
#
## (5) recherche d'un extrême = tri dans un data.frame
# tri de la table par Revenu
o <- order(Revenu)
states[o,][40:50,] 	# les 10 individus  correspondants aux
# (4) Exemple de boucle for () {...} en R
par(mfrow=c(2,4))  #
for (j in ind) {
hist(states[,j], xlab="",
main=colnames(states)[j])
}
## (5) recherche d'un extrême = tri dans un data.frame
# tri de la table par Revenu
o <- order(Revenu)
states[o,][40:50,] 	# les 10 individus  correspondants aux
head(states)
summary(Revenu)
## (5) recherche d'un extrême = tri dans un data.frame
# tri de la table par Revenu
o <- order(Revenu)
states[o,][40:50,] 	# les 10 individus  correspondants aux
o
par(mfrow==c(2,4))
par(mfrow=c(2,4))
for (j in ind) {
boxplot(state[,j], xlab="", main=colnames(state)[j])
}
colnames(states) # numeric?
ind <- c(2:9)
par(mfrow=c(2,4))
for (j in ind) {
boxplot(state[,j], xlab="", main=colnames(state)[j])
}
### DEBUT DE SEANCE: RELOAD
load("States.Rdata")
attach(states)
summary(states) # Etat doit etre char et Region "factor"
colnames(states) # numeric?
ind <- c(2:9)
par(mfrow=c(2,4))
for (j in ind) {
boxplot(state[,j], xlab="", main=colnames(state)[j])
}
boxplot(state[,j], main=colnames(state)[j])
boxplot(states[,j], main=colnames(states)[j])
colnames(states) # numeric?
ind <- c(2:9)
par(mfrow=c(2,4))
for (j in ind) {
boxplot(states[,j], main=colnames(states)[j])
}
### DEBUT DE SEANCE: RELOAD
load("States.Rdata")
attach(states)
summary(states) # Etat doit etre char et Region "factor"
barplot(Region[,1])
barplot(Region)
## avec labels Region compact cf  Feuille 1
RG <- factor(Region,labels=c("NC","NE","S","W"))
table(RG, Region) # vérification
par(mfrow=c(2,2)) # all in one
dbar <- tapply(Diplome, RG, mean)
barplot(dbar, names=levels(RG), main = "Moyenne de Diplome/Region")
dsd <- tapply(Diplome, Region, sd)
barplot(dsd, main = "sd de Diplome/Region")
cbar <- tapply(Meurtre, RG, mean)
barplot(cbar, main = "Moyenne de Crime/Region")
csd <- tapply(Meurtre, Region, sd)
barplot(dsd, main = "sd de Crime/Region")
cbar <- tapply(Meurtre, RG, mean)
barplot(cbar, main = "Moyenne de Crime/Region")
csd <- tapply(Meurtre, Region, sd)
barplot(dsd, main = "sd de Crime/Region")
par(mfrow=c(2,2)) # all in one
dbar <- tapply(Diplome, RG, mean) # aplliquer la fonction sur Diplome selon les Regions
barplot(dbar, names=levels(RG), main = "Moyenne de Diplome/Region")
dsd <- tapply(Diplome, Region, sd)
barplot(dsd, main = "sd de Diplome/Region")
cbar <- tapply(Meurtre, RG, mean)
barplot(cbar, main = "Moyenne de Crime/Region")
csd <- tapply(Meurtre, Region, sd)
barplot(dsd, main = "sd de Crime/Region")
mean(states[RG=="NC", 7])
mean(states[RG=="NC", 7])
# Boxplots par modalités d'un facteur
## (4)  toutes les numériques
par(mfrow=c(2,4))
for (j in ind) {
boxplot(states[,j] ~ RG, xlab="",
main=colnames(states)[j])
}
boxplot(states[,j] = RG, xlab="",
])
# Boxplots par modalités d'un facteur
## (4)  toutes les numériques
par(mfrow=c(2,4))
for (j in ind) {
boxplot(states[,j] ~ RG, xlab="",
main=colnames(states)[j])
}
# avec plusieur facteurs:
# recrée FD cf TP Feuille 1
# recodage en quantiles
# avec labels numériques par défaut
# x = variable quantitative à recoder
#	k = nb de classes, 2 par défaut
#	labels = noms des modalités
recodeQ <- function(x, k = 2, labels = 1:k) {
q <- quantile(x, probs = seq(0,1,1/k))
f <- cut(x, breaks = q, labels = labels, include = TRUE)
return(f)
}
FD <- recodeQ(Diplome, 2, labels=c("faible","fort"))
table(FD)
boxplot(Meurtre ~ RG+FD)
## interpréter...
## interpréter...
## interpréter...
## interpréter...
## interpréter...
## interpréter...
## interpréter...
# Boxplots par modalités d'un facteur
## (4)  toutes les numériques
par(mfrow=c(2,4))
for (j in ind) {
boxplot(states[,j] ~ RG, xlab="",
main=colnames(states)[j])
}
# avec plusieur facteurs:
# recrée FD cf TP Feuille 1
# recodage en quantiles
# avec labels numériques par défaut
# x = variable quantitative à recoder
#	k = nb de classes, 2 par défaut
#	labels = noms des modalités
recodeQ <- function(x, k = 2, labels = 1:k) {
q <- quantile(x, probs = seq(0,1,1/k))
f <- cut(x, breaks = q, labels = labels, include = TRUE)
return(f)
}
FD <- recodeQ(Diplome, 2, labels=c("faible","fort"))
table(FD)
