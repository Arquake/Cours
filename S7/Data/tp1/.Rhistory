## Manipulation de MATRICES
a=1:10               # on reprend
?matrix              # methode par defaut?
m <- matrix(a,nrow=4) # avec recycling (warning)
dim(m)
m[,3]                # 3eme colonne de m
m[2,3]               # element m(2,3)
class(m)             # different de mode(m)
is.matrix(m)
p = matrix(a,ncol=2)  # par defaut byrow = FALSE
q = matrix(a,nrow=2)
q %*% p               # produit de matrices
q %*% m               # pb dimensions
diag(m)               # diagonale, meme si pas carree
t(m)                  # transpose
apply(m,1,sum)        # operation (sum) par ligne (1)
##################################
# exercice Tuto R sur les matrices
a <- sample(0:9, size=50, rep=TRUE)
M <- matrix(a, nrow=10, ncol=5); M
apply(M,2,mean)
apply(M,1,sd)
plot(M[,1], type="b") # valeurs de la colonne vs index
par(mfrow=c(2,3))
apply(M, 2, plot, type="b")
# Usage des  ...
m <- matrix(rnorm(60), nrow=20)
########## Graphiques qq exemples
z <- seq(-4,4,len=200)
plot(z, dnorm(z), type="l", lwd=3, col="steelblue")
abline(h=0, col=8)
abline(v=0)
########## Graphiques qq exemples
par(1,1)
z <- seq(-4,4,len=200)
########## Graphiques qq exemples
par(mfrom=(1,1)
########## Graphiques qq exemples
par(mfrom=(1,1))
########## Graphiques qq exemples
par(mfrom=c(1,1))
example(dudi.pca)
1:10
1:10:2
1:10:2
1:10
1:10:2
1:10
##################################
# exercice Tuto R sur les matrices
a <- sample(0:9, size=50, rep=TRUE)
M <- matrix(a, nrow=10, ncol=5); M
apply(M,2,mean)
apply(M,1,sd)
plot(M[,1], type="b") # valeurs de la colonne vs index
par(mfrow=c(2,3))
apply(M, 2, plot, type="b")
# Usage des  ...
m <- matrix(rnorm(60), nrow=20)
apply(m, 2, median)
apply(m, 2, quantile)
apply(m, 2, quantile, probs=c(1/3, 2/3))
##################################
# exercice Tuto R sur les matrices
a <- sample(0:9, size=50, rep=TRUE)
z <- seq(-4,4,len=200)
plot(z, dnorm(z), type="l", lwd=3, col="steelblue")
################
## DATA FRAME ##
?data.frame
a=sample(1:10); b=rep(c(1,2),5)
c <- c(rep("M",6),rep("F",4)) # facteur qualitatif
c <- factor(c)
x <- data.frame(a,b,c) # creation de la structure
# Usage des  fonctions dans apply
m <- matrix(rnorm(60), nrow=20)
apply(m, 2, median)
apply(m, 2, quantile)
apply(m, 2, quantile, probs=c(1/3, 2/3))
ls <- list(1:5, "toto", c(T,F), M) # sans nom
ln <- list(x=1:5,nom="toto",z=c(T,F), M=M) # named
summary(ln) # default method
ls[[1]]     # extraction element 1 de la liste
ln$x        # idem lorsque le nom est connu
stateFacts = read.table("C:\Users\Nicolas\OneDrive\Documents\Cours\S7\Data\tp1\StateFacts.txt")
stateFacts = read.table("C:/Users/Nicolas/OneDrive/Documents/Cours/S7/Data/tp1/StateFacts.txt")
stateFacts
summary(stateFacts)
mean(stateFacts)
var(stateFacts)
max(staetFacts)
max(statetFacts)
max(stateFacts)
summary(stateFacts[1,])
mean(stateFacts[1,])
mean(stateFacts[,1])
mean(stateFacts[1,1])
mean(stateFacts)
stateFacts[1,]
stateFacts[,1]
stateFacts[,2]
stateFacts[,3]
mean(stateFacts[,3])
table(stateFacts)
head(stateFacts)
stateFacts
row.names(stateFacts)
stateFacts$Region <- as.factor(state$Region)
stateFacts$Region <- as.factor(stateFacts$Region)
summary(stateFacts)
stateFacts$Region <- as.factor(stateFacts$Region)
states$Pop
stateFacts = read.table("C:/Users/Nicolas/OneDrive/Documents/Cours/S7/Data/tp1/StateFacts.txt", header=T, row.names = 1)
stateFacts
row.names(stateFacts)
stateFacts$Region <- as.factor(stateFacts$Region) # marche pas
states$Pop
stateFacts$Pop
attach(stateFacts$Pop)
summary(stateFacts)
mean(stateFacts)
var(stateFacts)
sd(staetFacts)
max(stateFacts)
max(stateFacts)
stateFacts$Region <- as.factor(stateFacts$Region)
quantile.default(stateFacts$Analphab)
sum(stateFacts$Revenu<5000)
sum(stateFacts$Pop^2)
tapply(stateFacts$Meurtre, stateFacts$Region, mean)
stateFacts[1:5, c(1,6,10)]
?cut
# fichier dans le working dir de RStudio
states = read.table("C:/Users/Nicolas/OneDrive/Documents/Cours/S7/Data/tp1/StateFacts.txt", header=T, row.names = 1)
head(states)
row.names(states)
colnames(states)
dim(states)
summary(states) # Region is char by default
states$Region <- as.factor(states$Region)
summary(states) # Region is now factor: ok
# selection d'objets (comme une liste)
states[[1]]    # = var de rang 1 (Pop)
states$Pop     # idem car named list
states[[1]][1] # car states[[1]] vector
states[2,3]    # car hérite aussi de la class "matrix"
## 2.5 - comprendre attach(), detach()
states$Pop
Pop
attach(states)   # rend visible les variables de states
Pop
detach(states)
Pop
# 2.6 sauvegarde au format interne R
save(states, file="States.Rdata")
summary(states$Region) # method summary.factor
summary(states$Apb)    # method summary.numeric
summary(states)        # summary.data.frame
summary(states$Etat)   # why??
## 3) sur stat élémentaires de states
attach(states)
mean(states$Revenu)
mean(Revenu)
sd(Meurtre)
sum(Revenu>5000) # nb d'états de revenu>5000
apply(states[,-c(1, 10)], 2, mean)
colnames(states)[4] <- "Apb"
sum(states$Pop^2)
summary(states) # vérif; method summary.data.frame
detach(states)
states$Region <- factor(states$Region)
# sauvegarde au format interne R (écrase la précédente)
save(states, file="States.Rdata")
### Utiliser en début de session (workspace vide)
load("States.Rdata")
attach(states)
# (2.8)
tapply(Meurtre, Region, mean)
## (6)
states[1:10,]
states[(nrow(states)-4):nrow(states),]
states[1:5, c(1, 6,10)]   # avec num col
states[1:5, c("Etat", "Meurtre", "Region")] # avec nom var
# d) selection d'obs et de var
states[Region == "South" & Revenu > 4500, c("Etat", "Pop")]
## (7) Création ou modification de variables
RevenuE <- Revenu * 1.1 # constante arbitraire ici
summary(RevenuE)
## copie de Region en labels conçis: R - like: pas de tests if... then
RG <- factor(Region,labels=c("NC","NE","S","W")) #
## vérification (table see later)
table(RG)
table(Region)
table(RG, Region) # table de contingence de 2 faceurs identiques
## (7 c) Facteur par recodage d'une var quantitative
?cut
cut(Diplome, breaks = 3) # auto
## TPs R sur données State Facts
## M1 MIAGE - D. Chauveau
#############################################
####  STATISTIQUES DESCRIPTIVES AVEC R   ####
#############################################
#####################################
############### TP F2 ###############
#####################################
### DEBUT DE SEANCE: RELOAD
load("States.Rdata")
attach(states)
summary(states) # Etat doit etre char et Region "factor"
###### 1. Facteur Qualitatif - tables
# 1)
table(Region)    # table des n_j
table(Region)/nrow(states) # des f_j
t <- table(Region); prop.table(t)
# 2) barplot des effectifs (fréq absolues)
plot(Region)
barplot(prop.table(t)) # barplot des f_j
## 3) table de contingence
# recrée FD cf TP Feuille 1
FD <- cut(Diplome, breaks = c(min(Diplome),47,57, max(Diplome)),
labels = c("a","b","c"), include.lowest = TRUE)
table(FD)
table(Region, FD)
t <- table(Region, FD)
t
addmargins(t) # table des n_{ij} avec marges
addmargins(prop.table(t)) # idem avec proba marginales
prop.table(t) # loi empirique du couple
prop.table(t, margin=1) # profils ligne
print(prop.table(t, margin=1), 2) # shorter output (readability)
print(prop.table(t, margin=2), 2) # profils-colonne
spineplot(t)
spineplot(Region, FD) # same
## INTERPRETER...
###############################################
###### 2. Facteur Qualitatif - Test du chi-deux
## 1)
chisq.test(Region, FD)
chisq.test(t) # same
s <- chisq.test(t) # value returned?
class(s) # hypothesis test...
names(s)
s$statistic  # observed stat, pvalue etc
## 2) allure loi sous H0:
z <- seq(0,45,len=200)
plot(z,dchisq(z,s$param), type="l", main="densité de la loi sous H0")
abline(h=0, col=8); points(s$stat,0,pch="x") # stat observée
abline(v = qchisq(p = 0.95, df = s$parameter), lty=2) # région de rejet à 5%
1 - pchisq(s$stat, s$parameter) # pval
## 3) validité de l'approximation ?
# découpage en classe d'égales proba => quantiles
k=3
q <- quantile(Diplome,probs=seq(0,1,1/k))
FDq <- cut(Diplome,breaks=q, include=T,
labels=c("faible","moyen","fort"))
table(FDq); plot(FDq)   # comparer avec FD
#########################
### 4)  Exemple de définition de fonctions en R:
# recodage en quantiles
# avec labels numériques par défaut
# x = variable quantitative à recoder
#	k = nb de classes, 2 par défaut
#	labels = noms des modalités
recodeQ <- function(x, k = 2, labels = 1:k) {
q <- quantile(x, probs = seq(0,1,1/k))
f <- cut(x, breaks = q, labels = labels, include = TRUE)
return(f)
}
# exemples
table(recodeQ(Diplome))
table(recodeQ(Apb,5))
plot(recodeQ(Apb, 3, labels=c("a","b","c")))
FD <- recodeQ(Diplome, 3,
labels=c("faible","moyen","fort"))
t <- table(Region,FD)
t
chisq.test(Region,FD) # <=> chisq.test(t)
## essai k=2 classes
FD <- recodeQ(Diplome, 2,
labels=c("faible","fort"))
t <- table(Region,FD)
t
chisq.test(t)
#
#########################
### 4)  Exemple de définition de fonctions en R:
# recodage en quantiles
# avec labels numériques par défaut
# x = variable quantitative à recoder
#	k = nb de classes, 2 par défaut
#	labels = noms des modalités
recodeQ <- function(x, k = 2, labels = 1:k) {
q <- quantile(x, probs = seq(0,1,1/k))
f <- cut(x, breaks = q, labels = labels, include = TRUE)
return(f)
}
# exemples
table(recodeQ(Diplome))
table(recodeQ(Apb,5))
plot(recodeQ(Apb, 3, labels=c("a","b","c")))
### DEBUT DE SEANCE: RELOAD
load("States.Rdata")
attach(states)
```
```
## TPs R sur données State Facts
## M1 MIAGE - D. Chauveau
#############################################
####  STATISTIQUES DESCRIPTIVES AVEC R   ####
#############################################
#####################################
############### TP F1 ###############
#####################################
# Importation sous forme de data.frame
# Win: Fichier -> Changer le répertoire courant
# -> path vers le fichier texte
getwd()
setwd('C:/Users/benja/Documents/M1/Analyse-donnees')
setwd('C:\Users\Nicolas\OneDrive\Documents\Cours\S7\Data\tp1')
## TPs R sur données State Facts
## M1 MIAGE - D. Chauveau
#############################################
####  STATISTIQUES DESCRIPTIVES AVEC R   ####
#############################################
#####################################
############### TP F1 ###############
#####################################
# Importation sous forme de data.frame
# Win: Fichier -> Changer le répertoire courant
# -> path vers le fichier texte
getwd()
setwd('C:\Users\Nicolas\OneDrive\Documents\Cours\S7\Data\tp1')
# fichier dans le working dir de RStudio
states <- read.table("StateFacts.txt",
header=T, row.names=1) # labels col. 1
#####################################
############### TP F1 ###############
#####################################
# Importation sous forme de data.frame
# Win: Fichier -> Changer le répertoire courant
# -> path vers le fichier texte
getwd()
setwd('C:\Users\Nicolas\OneDrive\Documents\Cours\S7\Data\tp1')
setwd('C:/Users/Nicolas/OneDrive/Documents/Cours/S7/Data/tp1')
# fichier dans le working dir de RStudio
states <- read.table("StateFacts.txt",
header=T, row.names=1) # labels col. 1
## TPs R sur données State Facts
## M1 MIAGE - D. Chauveau
#############################################
####  STATISTIQUES DESCRIPTIVES AVEC R   ####
#############################################
#####################################
############### TP F1 ###############
#####################################
# Importation sous forme de data.frame
# Win: Fichier -> Changer le répertoire courant
# -> path vers le fichier texte
getwd()
setwd('C:/Users/Nicolas/OneDrive/Documents/Cours/S7/Data/tp1')
# fichier dans le working dir de RStudio
states <- read.table("StateFacts.txt",
header=T, row.names=1) # labels col. 1
# ou chemin complet vers le fichier
# states <- read.table(".../StateFacts_tuto.txt",
#          header=T, row.names=1) # labels col. 1
head(states)
row.names(states)
colnames(states)
dim(states)
summary(states) # Region is char by default
states$Region <- as.factor(states$Region)
summary(states) # Region is now factor: ok
# selection d'objets (comme une liste)
states[[1]]    # = var de rang 1 (Pop)
states$Pop     # idem car named list
states[[1]][1] # car states[[1]] vector
states[2,3]    # car hérite aussi de la class "matrix"
## 2.5 - comprendre attach(), detach()
states$Pop
Pop
attach(states)   # rend visible les variables de states
Pop
detach(states)
Pop
# 2.6 sauvegarde au format interne R
save(states, file="States.Rdata")
summary(states$Region) # method summary.factor
summary(states$Apb)    # method summary.numeric
summary(states)        # summary.data.frame
summary(states$Etat)   # why??
## 3) sur stat élémentaires de states
attach(states)
mean(states$Revenu)
mean(Revenu)
sd(Meurtre)
sum(Revenu>5000) # nb d'états de revenu>5000
apply(states[,-c(1, 10)], 2, mean)
colnames(states)[4] <- "Apb"
sum(states$Pop^2)
summary(states) # vérif; method summary.data.frame
detach(states)
states$Region <- factor(states$Region)
# sauvegarde au format interne R (écrase la précédente)
save(states, file="States.Rdata")
### Utiliser en début de session (workspace vide)
load("States.Rdata")
attach(states)
# (2.8)
tapply(Meurtre, Region, mean)
# Est-ce significatif?...
MbyR = tapply(Meurtre, Region, mean)
sdbyR = tapply(Meurtre, Region, sd)
## (6)
states[1:10,]
states[(nrow(states)-4):nrow(states),]
states[1:5, c(1, 6,10)]   # avec num col
states[1:5, c("Etat", "Meurtre", "Region")] # avec nom var
# d) selection d'obs et de var
states[Region == "South" & Revenu > 4500, c("Etat", "Pop")]
## (7) Création ou modification de variables
RevenuE <- Revenu * 1.1 # constante arbitraire ici
summary(RevenuE)
## copie de Region en labels conçis: R - like: pas de tests if... then
RG <- factor(Region,labels=c("NC","NE","S","W")) #
## vérification (table see later)
table(RG)
table(Region)
table(RG, Region) # table de contingence de 2 faceurs identiques
## (7 c) Facteur par recodage d'une var quantitative
?cut
cut(Diplome, breaks = 3) # auto
par(mfrow=c(1,2)) # comparaison avec histo
hist(Diplome, col=8)
plot(cut(Diplome, 3)) # découpage auto en 3 classe de même taille
## classe imposées
FD <- cut(Diplome, breaks = c(min(Diplome),47,57, max(Diplome)),
labels = c("a","b","c")) # specified
summary(FD) # why 1 NA ?
table(FD)   # 1 missing
FD <- cut(Diplome, breaks = c(min(Diplome),47,57, max(Diplome)),
labels = c("a","b","c"), include.lowest = TRUE)
summary(FD) # OK
# (7 d)
statesd <- data.frame(RevenuE, Meurtre, RG, FD,
row.names = row.names(states))
summary(statesd)
## (8)
states8a <- states[FD == "b" & Region == "South",]
states8a  # data.frame?
class(states8a)
states8b <- states[Region == "North_Central" & Revenu > 4000,]
states8b
# ou comme RG est dans le workspace
states8b <- states[RG == "NC" & Revenu > 4000,]
states8b
# data frame pour Feuille 2
# avec les variables créées
statesF2 <- data.frame(states, FD, RG)
summary(statesF2)
save(statesF2, file = "StatesF2.Rdata")
## (6)
states[1:10,]
states[(nrow(states)-4):nrow(states),]
states[1:5, c(1, 6,10)]   # avec num col
states[1:5, c("Etat", "Meurtre", "Region")] # avec nom var
states[(nrow(states)-4):nrow(states),]
states[1:5, c(1, 6,10)]   # avec num col
states[1:5, c("Etat", "Meurtre", "Region")] # avec nom var
# d) selection d'obs et de var
states[Region == "South" & Revenu > 4500, c("Etat", "Pop")]
## (7) Création ou modification de variables
RevenuE <- Revenu * 1.1 # constante arbitraire ici
summary(RevenuE)
## copie de Region en labels conçis: R - like: pas de tests if... then
RG <- factor(Region,labels=c("NC","NE","S","W")) #
## vérification (table see later)
table(RG)
table(Region)
table(RG, Region) # table de contingence de 2 faceurs identiques
## (7 c) Facteur par recodage d'une var quantitative
?cut
cut(Diplome, breaks = 3) # auto
par(mfrow=c(1,2)) # comparaison avec histo
hist(Diplome, col=8)
plot(cut(Diplome, 3)) # découpage auto en 3 classe de même taille
## classe imposées
FD <- cut(Diplome, breaks = c(min(Diplome),47,57, max(Diplome)),
labels = c("a","b","c")) # specified
summary(FD) # why 1 NA ?
table(FD)   # 1 missing
FD <- cut(Diplome, breaks = c(min(Diplome),47,57, max(Diplome)),
labels = c("a","b","c"), include.lowest = TRUE)
summary(FD) # OK
# (7 d)
statesd <- data.frame(RevenuE, Meurtre, RG, FD,
row.names = row.names(states))
summary(statesd)
## (8)
states8a <- states[FD == "b" & Region == "South",]
states8a  # data.frame?
class(states8a)
states8b <- states[Region == "North_Central" & Revenu > 4000,]
states8b
# ou comme RG est dans le workspace
states8b <- states[RG == "NC" & Revenu > 4000,]
states8b
# data frame pour Feuille 2
# avec les variables créées
statesF2 <- data.frame(states, FD, RG)
summary(statesF2)
save(statesF2, file = "StatesF2.Rdata")
