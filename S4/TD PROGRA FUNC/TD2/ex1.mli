let answer = 42;;                                                  (* definition *)     (* val answer : int = 42 *)
let give = fun x -> answer;;                                       (* definition *)     (* val give : 'a -> int = <fun> *)
let answer = "Quarante-deux";;                                     (* definition *)     (* string = "Quarante-deux" *)
give 10;;                                                          (* expression *)     (* -: int = 42 *)
give 12;;                                                          (* expression *)     (* -: int = 42 *)
let f = fun msg -> let answer = "Forty-Two" in msg^": "^answer;;   (* definition *)     (* val f : string -> string = <fun> *)
f "The answer is ";;                                               (* expression *)     (* -: string =  "The answer is : Forty-Two" *)
let g = fun x -> x + let x = 1 in x + let x = 2 in x;;             (* definition *)     (* val g : int -> int = <fun> *)
g(g 1);;                                                           (* expression *)     (* -: int = 7 *)
let swap = fun (x,y) -> (y,x);;                                    (* definition *)     (* val swap : ('a,'b) -> ('b,'a) = <fun> *)
let l1 = [1,2,3,4];;                                               (* definition *)     (* val l1 = [(1,2,3,4)] : [int * int * int * int] list *)
UOList.hd l1;;                                                     (* expression *)     (* -: int * int * int * int = (1,2,3,4) *)
UOList.tl l1;;                                                     (* expression *)     (* -: int * int * int * int = [] *)
let l2 = [1;2;3;4];;                                               (* definition *)     (* val l2 : int list = [1;2;3;4] *)
UOList.hd l2;;                                                     (* expression *)     (* -: int = 1 *)
UOList.tl l2;;                                                     (* expression *)     (* -: int list = [2;3;4] *)
let k = fun lst ->                                                 (* definition *)     (* val k : int list -> int list *)
    let len = UOList.length lst in                                                    
    UOList.map((fun i -> len - i), lst);;                                             
k l2;;                                                             (* expression *)     (* -: int list =[3 ; 2 ; 1; 0] *)