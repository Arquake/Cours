1 + 2 * 3;;                                                 (* -:int = 7 *)
3 + 1 - 4 - 2;;                                             (* -:int = -2 *)
1 + 2.;;                                                    (* error float =! int *)   
1 +. 2.;;                                                   (* erreur int =! float *)   
1. +. 2.;;                                                  (* -:float = 3. *)   
’\n’;;                                                      (* -:char = '\n' *)
"Hello " ^ " there!";;                                      (* -:string = "Hello  there!" *)    
let answer = 42;;                                           (* val answer : int = 42 *)   
(0 <= answer) && (answer <= 10);;                           (* -:bool = false *)    
if (0 <= answer) then "OK" else "KO";;                      (* -:string = "OK" *)    
let result = -1.5;;                                         (* val result : float = -1.5 *)   
if result < 0.0 then -1 else 1.;;                           (* error return type *)    
fun x -> 2. *. x +. 1.;;                                    (* -: float -> float = <fun> *)    
let f = fun x -> 2. *. x +. 1.;;                            (* val f : float -> float *)    
(f 2);;                                                     (* error int != float *)
(f 2.5);;                                                   (* -:float = 6. *)   
(f 0.5) +. (f 1.0);;                                        (* -:float = 5. *)    
f(f 2.0);;                                                  (* -:float = 11. *)   
f(f(f 1.0));;                                               (* -: float = 15. *)       
(f(f(f 1.0))) +. 1.0;;                                      (* -: float = 16. *)    
(1, "One");;                                                (* -: (int * string) = (1 * "One") *)       
(1, ’1’);;                                                  (* -: (int * char) = (1 * ’1’) *)   
(1, 1.0);;                                                  (* -: (int * float) = (1 * 1.0) *)   
let 0point = (0., 0.);;                                     (* error val name 0 en début de nom*)    
let Origin = (0., 0.);;                                     (* error val name Majuscule en début de nom*)    
let _person = ("Anne", "Nonyme", true);;                    (* val _person : (string, string, bool) = ("Anne" * "Nonyme" * true) *)    
let to_string = fun (firstname, lastname, is_student) ->        
lastname ^ ", " ^ firstname ^ ": " ^                           
if is_student then "étudiant" else "enseignant";;           (* val to_string : (string * string * bool) -> string = <fun> *)   
to_string _person;;                                         (* -: string "Nonyme, Anne: étudiant" *)   
to_string ("Jean", "Bon");;                                 (* error parameters *)                   